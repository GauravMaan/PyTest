In pytest, POM stands for Page Object Model,
which is a design pattern that is commonly used in automated testing to create an object-oriented
class for each web page or component within an application.
The core idea is to separate the test logic from the web page’s structure and behavior,
making the tests more maintainable and scalable.

Key Principles of POM in pytest:
	1.	Separation of Concerns:
	•	The Page Object Model emphasizes the separation between test logic and UI interactions.
	    This is achieved by creating a class for each web page in your application that encapsulates all actions and elements on that page.
	•	Tests themselves should only be concerned with the behavior (test actions) rather than how the UI is interacting with the page.
	2.	Reusability:
	•	Once the page objects are created, they can be reused across different tests.
	    This reduces code duplication and makes maintaining tests easier as the UI changes.
	3.	Maintainability:
	•	When the UI changes (like a button’s ID or the layout of a page),
	    you only need to update the page object rather than modifying each test individually.

Structure of POM:
	1.	Page Object Class: Each web page is represented by a class that contains:
	•	Web elements (buttons, input fields, etc.).
	•	Methods to interact with those elements (clicking buttons, sending keystrokes, etc.).
	•	A method for verifying whether certain elements or conditions exist on the page.
	2.	Test Class: Contains test cases that interact with the page object methods.
	    The test classes focus only on what needs to be tested,
	    such as actions to be performed on the page or assertions to be made.

Advantages of Using POM with pytest:
	1.	Cleaner Test Code:
	•	The test scripts become more focused on test scenarios rather than the implementation details of interacting with the web page.
	2.	Easier to Update:
	•	When the web page changes (like the modification of a button’s ID),
	    you only need to update the Page Object, and the tests will continue to function without any further changes.
	3.	Code Reusability:
	•	The same Page Object can be used in multiple tests, leading to better reusability and less code duplication.
	4.	Improved Maintainability:
	•	If any UI changes occur, such as changes to web elements,
	    you only need to modify the Page Object class. This reduces the maintenance effort needed for tests.


